package com.curso;

import java.time.Duration;
import java.util.function.Consumer;

import org.springframework.stereotype.Component;

import reactor.core.publisher.Flux;
import reactor.core.publisher.SynchronousSink;
import reactor.core.scheduler.Schedulers;

@Component
public class Flujos {

	//Un flujo para el cual ya tenemos los elementos
	public Flux<String> flux1() {
		Flux<String> stringFlux = Flux.just("hello","doctor","name","continue","yesterday","tomorrow");
		return stringFlux;
	}
	
	//Un flujo que emite un elemento cada periodo de tiempo
	public Flux<Long> flux2(){
		return Flux.interval(Duration.ofSeconds(1));
	}

	//Flujo que indica que el consumidor procesar√° los elementos utilizando otro hilo
	public Flux<String> flux3() {
		Flux<String> stringFlux = Flux
			.just("hello","doctor","name","continue","yesterday","tomorrow")
			.publishOn(Schedulers.boundedElastic());
		return stringFlux;
	}
		
	
	public Flux<String> flux4(){
		
		Flux<String> flux = Flux.generate(new Consumer<SynchronousSink<String>>() {
			private int contador;
			
			@Override
			public void accept(SynchronousSink<String> sink) {
				sink.next("Elemento "+(++contador));
				try {
					Thread.sleep(1000);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
				if(contador>10) {
					sink.complete();
				}				
			}
		});

		return flux;
	}
	
	
}
